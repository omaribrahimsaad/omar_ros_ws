#!/usr/bin/env python
PACKAGE = "mrc10100"

from dynamic_reconfigure.parameter_generator_catkin import *
import math

gen = ParameterGenerator()

gen.add("pid_x_p", double_t, 0, "PID X constant P", 213, 0, 10000)
gen.add("pid_x_i", double_t, 0, "PID X constant I", 2417, 0, 10000)
gen.add("pid_x_d", double_t, 0, "PID X constant D", 13, 0, 10000)
gen.add("pid_x_n", double_t, 0, "PID X derivative filter coefficient", 13, 0, 100)
gen.add("pid_x_high", double_t, 0, "PID X output limit high", 1000, -1000, 1000)
gen.add("pid_x_low", double_t, 0, "PID X output limit low", -1000, -1000, 1000)
gen.add("pid_x_windup", bool_t, 0, "PID X anti windup", True)

gen.add("pid_z_p", double_t, 0, "PID Z constant P", 213, 0, 10000)
gen.add("pid_z_i", double_t, 0, "PID Z constant I", 2417, 0, 10000)
gen.add("pid_z_d", double_t, 0, "PID Z constant D", 13, 0, 10000)
gen.add("pid_z_n", double_t, 0, "PID Z derivative filter coefficient", 13, 0, 100)
gen.add("pid_z_high", double_t, 0, "PID Z output limit high", 1000, -1000, 1000)
gen.add("pid_z_low", double_t, 0, "PID Z output limit low", -1000, -1000, 1000)
gen.add("pid_z_windup", bool_t, 0, "PID Z anti windup", True)

gen.add("wheel_distance", double_t, 0, "distance between left and right in meter", 0.0445, 0, 100)
gen.add("wheel_right_size", double_t, 0, "tyre right size in meter", 0.0445, 0, 100)
gen.add("wheel_left_size", double_t, 0, "tyre left size in meter", 0.0445, 0, 100)

gen.add("enc_right_cpr", double_t, 0, "encoder right count per rotation at the tyre", 516, 0, 10000)
gen.add("enc_right_n", double_t, 0, "encoder right derivative filter coefficient", 13, 0, 100)
gen.add("enc_left_cpr", double_t, 0, "encoder left count per rotation at the tyre", 516, 0, 10000)
gen.add("enc_left_n", double_t, 0, "encoder left derivative filter coefficient", 13, 0, 100)

gen.add("acc_x_bias", double_t, 0, "accelerator bias at X axis", 0, -100, 100)
gen.add("acc_y_bias", double_t, 0, "accelerator bias at Y axis", 0, -100, 100)
gen.add("acc_z_bias", double_t, 0, "accelerator bias at Z axis", 0, -100, 100)
gen.add("acc_x_scale", double_t, 0, "accelerator scale at X axis", 1, 0, 10)
gen.add("acc_y_scale", double_t, 0, "accelerator scale at Y axis", 1, 0, 10)
gen.add("acc_z_scale", double_t, 0, "accelerator scale at Z axis", 1, 0, 10)

gen.add("gyro_x_bias", double_t, 0, "gyroscope bias at X axis", 0, -10, 10)
gen.add("gyro_y_bias", double_t, 0, "gyroscope bias at Y axis", 0, -10, 10)
gen.add("gyro_z_bias", double_t, 0, "gyroscope bias at Z axis", 0, -10, 10)

gen.add("mag_x_bias", double_t, 0, "magnetometer bias at X axis", 0, -10000, 10000)
gen.add("mag_y_bias", double_t, 0, "magnetometer bias at Y axis", 0, -10000, 10000)
gen.add("mag_z_bias", double_t, 0, "magnetometer bias at Z axis", 0, -10000, 10000)
gen.add("mag_x_scale", double_t, 0, "magnetometer scale at X axis", 1, 0, 100)
gen.add("mag_y_scale", double_t, 0, "magnetometer scale at Y axis", 1, 0, 100)
gen.add("mag_z_scale", double_t, 0, "magnetometer scale at Z axis", 1, 0, 100)

gen.add("advance", bool_t, 0, "advance setting debug", False)

exit(gen.generate(PACKAGE, "mrc10100", "mrc10100"))
